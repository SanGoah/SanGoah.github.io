{"meta":{"title":"Mech_Mind‘s blog","subtitle":null,"description":"敲键盘,按快门","author":"Mechanical_Mind","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2019-09-23T10:13:29.000Z","updated":"2019-10-16T06:22:05.207Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"欢迎您，访客。本博客为Mech_Mind备份个人笔记等的空间。本博客存在的意义既不是帮助他人，也不是分享生活，因此也不会提交给搜索引擎收录。如果您偶然点击进来，便是我们的缘分。如果其中的内容对您有些许帮助，欢迎您常来看看；当然，本人能力一般、水平有限，所写内容多是粗浅鄙陋之零碎，望能博君一笑。这方小天地分为以下一些归档：戏法：这里记录着必要环境的配置——譬如法师之手的法术模型。虽然没什么技术含量，但总归是个开始。前端：虽然不打算从事相关工作，不过还是认真接触一下吧。丧志：玩物。"}],"posts":[{"title":"Manjaro Linux主力机的安装与及基本环境配置.md","slug":"Manjaro-Linux主力机的安装与及基本环境配置","date":"2019-09-23T13:34:18.000Z","updated":"2019-12-02T09:21:43.254Z","comments":true,"path":"2019/09/23/Manjaro-Linux主力机的安装与及基本环境配置/","link":"","permalink":"http://yoursite.com/2019/09/23/Manjaro-Linux%E4%B8%BB%E5%8A%9B%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"","text":"0. 环境戴尔Inspiron 15-7567笔记本，英特尔i7-7700HQ（集成HD630）+英伟达GTX1050Ti，三星970EVO500G（NVMe）。使用32G闪迪酷刃U盘引导安装manjaro-GNOME-18.1.0-rc10-stable-x86_64，经测试兼容良好，触控板灵敏，所有功能键均可正常使用（第一次装的时候Fx键直接按是功能键，按Fn键是Fx，第二次装的时候按Fx直接就是Fx，按住Fn才是功能键，奇怪）。1. 系统安装1.1. 制作引导盘在中科大镜像站https://mirrors.ustc.edu.cn/manjaro-cd/下载iso镜像（manjaro|乐于简单那个网站似乎是个人的……），再在http://rufus.ie/下载引导盘制作工具Rufus，分区类型GPT，目标系统类型UEFI(非CSM)，其余默认，点击开始。检测到ISOHybrid镜像后以DD镜像模式写入，否则系统无法识别。应当使用尽可能新的系统镜像，这是由于Manjaro是滚动更新，新的补丁仅针对新的环境进行测试，老系统直接更新最新的内容的话很容易滚挂——基于同样的理由，装好系统后平时也应当保持最新。1.2. BIOS设置开机闪DELL图标时狂按F12（不用按Fn），进入BIOS界面，选择BIOS SETUP进入图形界面进行设置，在出厂设置下修改Secure Boot-&gt;Secure Boot Enable为Disabled，否则会有一系列错误：微软要求预装Windows的PC需要开启Secure Boot，此时操作系统启动过程中涉及到的无CA数字签名的软件比如Linux这种开源的无签名的系统就会被直接阻止；修改System Configuration-&gt;SATA Operation为AHCI，否则系统将无法识别到NVMe的硬盘：AHCI（Serial ATA Advanced Host Controller Interface，串行ATA高级主控接口/高级主机控制器接口）是以Intel为首的多家公司联合研发的接口标准，它允许存储驱动程序启用高级串行 ATA 功能，如本机命令队列和热插拔等。1.3. 系统安装开机进BIOS界面，选择引导盘启动，进入grub界面，选择语言为中文，将光标移动至BOOT那一项上按E编辑启动设置，或进入那个空白的笔记本一样的选项，将driver=free改为（或直接添加，如果选择进入空白的笔记本一样的选项的话）driver=intel xdriver=mesa acpi_osi=! acpi_osi=&quot;Windows 2009&quot;，否则会因默认的开源驱动nouveau与N卡冲突而卡死。按ctrl+x或F12即可启动。启动后正常安装即可。关于分区设置，选择默认的清空磁盘选项，如果选择自定义，应当在硬盘开始处设置1MiB空闲空间。安装完成后选择重启，在出现DELL图标后长按Esc键直至进入grub界面（网络上各路教程都说是按住Shift键进入，但经测试该机器下无效），按E进入编辑模式，在quite后添加nouveau.modeset=0，理由同上，按ctrl+x或F12即可启动。这一设置只影响当次启动，因此在配置好驱动前的每次启动都应做此设置。2. 系统配置2.1. 配置pacmanPacman是Arch Linux的包管理器。提供经过测试的完善支持的程序。应当尽可能使用pacman提供的程序，由社区维护的程序可能会出各种奇怪的问题。sudo pacman-mirrors -i -c China -m rank，随后会弹出一个图形界面，可在其中选择一些源添加。添加并更新sudo pacman -Syy后在国内也可以方便地下载包了。pacman中的包通过GPG签名，想要安装一个包，则这个包必须通过检查。因此需要先为计算机安装和更新密钥以识别待安装的包：sudo pacman -S archlinux-keyring，sudo pacman-key --refresh-keys。重新加载sudo pacman-key --init、sudo pacman-key --populate并清除缓存sudo pacman -Scc后应当就没问题了。此时可能出现仍无法进行验证的错误，将/etc/pacman.conf中的SigLevel项都设为Never即可，此选项决定对密钥的检查级别。记得用完改回来。接下来（可以等省完系统啥的回来再说）配置额外的源：archlinuxcn是由Arch Linux中国维护的提供具有中国特色的包的仓库。在/etc/pacman.conf添加：1[archlinuxcn]2SigLevel&#x3D;Optional TrustedOnly3Server&#x3D;服务器地址以下地址供参考：CDN (ipv4, http, https)Global CDN (no nodes in mainland China)[archlinuxcn]Server= https://cdn.repo.archlinuxcn.org/$arch浙江大学 (浙江杭州) (ipv4, ipv6, http, https)Added: 2017-06-05[archlinuxcn]Server= https://mirrors.zju.edu.cn/archlinuxcn/$arch中国科学技术大学 (ipv4, ipv6, http, https)[archlinuxcn]Server= https://mirrors.ustc.edu.cn/archlinuxcn/$arch清华大学 (ipv4, ipv6, http, https)[archlinuxcn]Server= https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$archxTom (Hong Kong) (ipv4, ipv6, http, https)Added: 2017-09-18xTom Hong Kong Mirror[archlinuxcn]Server= https://mirror.xtom.com.hk/archlinuxcn/$archUnique Studio (湖北武汉) (ipv4, http, https)Added: 2017-08-02[archlinuxcn]Server= https://mirrors.hustunique.com/archlinuxcn/$arch上海科技大学 (上海) (ipv4, http, https)Added: 2016-04-07[archlinuxcn]Server= https://mirrors-wan.geekpie.org/archlinuxcn/$arch中国科学院开源软件协会 (北京) (ipv4, http)Added: 2017-02-09[archlinuxcn]Server= http://mirrors.opencas.org/archlinuxcn/$arch电子科技大学凝聚网络安全工作室 (ipv4, http)Added: 2016-05-28[archlinuxcn]Server= http://mirrors.cnssuestc.org/archlinuxcn/$arch网易 (ipv4, http)[archlinuxcn]Server= http://mirrors.163.com/archlinux-cn/$arch重庆大学 (ipv4, http)[archlinuxcn]Server= http://mirrors.cqu.edu.cn/archlinuxcn/$arch然后全面更新一下，再sudo pacman-mirrors -g更新源列表，更新密钥环sudo pacman -S archlinuxcn-keyring（可能需要多试几次）后即可使用。不太建议使用其它的社区源。不需要配置yaourt，它已经停止维护了。2.2. 系统更新sudo pacman-mirrors -g更新源列表，这可以使pacman找到最新的仓库，更新系统前最好这么弄一下保证源最新；sudo pacman -Syyu刷新并更新系统（如果报错误：同步所有数据库失败，可sudo pkill pacman）。2.3. N卡驱动的安装在Manjaro Setting Manager-&gt;Hardware Configuration中选择Auto Install Proprietary Driver，等很久很久很久之后即可。3. 常用应用安装3.1. 输入法在linux中，输入法是依托于输入法框架的。主要有ibus和fcitx两个框架。不像搜狗输入法只能在fcitx上使用，RIME输入法两者皆可。这里使用fcitx上的RIME，尽管fcitx-rime并非由RIME官方维护。首先安装fcitx：sudo pacman -S fcitx-im，该命令将安装fcitx所有必要的组件。另外，sudo pacman -S fcitx-configtool，这个包为fcitx的设置提供了图形界面。fcitx自带中文输入法，不过很难用。安装RIME：sudo pacman -S fcitx-rime。接下来添加配置文件，指定在GTK或QT下使用fcitx输入。在~/下新建.xprofile，添加：1export GTK_IM_MODULE&#x3D;fcitx2export QT_IM_MODULE&#x3D;fcitx3export XMODIFIERS&#x3D;@im&#x3D;fcitx注意：文件为~/.xprofile，如果当前用户为root则类似nano ~/.xprofile的命令会把文件新建在/root/，这是不行的。接下来重启即可，应当可以看到屏幕右上角出现了一个键盘样图标，点进去选择配置当前输入法，用+添加中州韻，用-删去其它输入法，重新部署之后就可以使用了。与小狼毫不同，fcitx-rime的皮肤和相关设置由fcitx决定，不过从fcitx中配置也极为方便，不过我配置完后fcitx菜单中的虚拟键盘/方案列表/输入法/皮肤一栏的下拉菜单弹出后会立即收回无法选中，因为不影响使用就没管；另其外自带双拼配置文件（位于程序文件夹/usr/share/rime-data，若没有，从https://github.com/rime/rime-double-pinyin可下载），只需在用户配置文件夹~/.config/fcitx/rime（若为ibus，则为~/.config/ibus/rime）中新建一个default.custom.yaml，添加：1# default.custom.yaml 2# save it to: 3# ~&#x2F;.config&#x2F;ibus&#x2F;rime (linux) 4# ~&#x2F;Library&#x2F;Rime (macos) 5# %APPDATA%\\Rime (windows) 67patch: 8 schema_list: 9 - schema: luna_pinyin # 朙月拼音 10 - schema: luna_pinyin_simp # 朙月拼音 简化字模式 11 - schema: luna_pinyin_tw # 朙月拼音 臺灣正體模式 12 - schema: terra_pinyin # 地球拼音 dì qiú pīn yīn 13 - schema: bopomofo # 注音 14 - schema: jyutping # 粵拼 15 - schema: cangjie5 # 倉頡五代 16 - schema: cangjie5_express # 倉頡 快打模式 17 - schema: quick5 # 速成 18 - schema: wubi86 # 五笔 86 19 - schema: wubi_pinyin # 五笔拼音混合輸入 20 - schema: double_pinyin # 自然碼雙拼 21 - schema: double_pinyin_mspy # 微軟雙拼 22 - schema: double_pinyin_abc # 智能 ABC 雙拼 23 - schema: double_pinyin_flypy # 小鶴雙拼 24 - schema: wugniu # 吳語上海話（新派） 25 - schema: wugniu_lopha # 吳語上海話（老派） 26 - schema: sampheng # 中古漢語三拼 27 - schema: zyenpheng # 中古漢語全拼 28 - schema: ipa_xsampa # X-SAMPA 國際音標 29 - schema: emoji # emoji 表情保存后重新部署即可。3.2. Timsudo pacman -S deepin.com.qq.office安装即可。这个过程同时安装了wine。sudo pacman -S winetricks后即可WINEPREFIX=~/.win32 winetricks打开wine，运行一些.exe。3.3. 百度云sudo pacman -S baidunetdisk，需要多试几次才能登录上。3.4. 网易云网易云客户端虽然是网易云和深度合作的官方客户端，但除了可以下载外体验上似乎与Web端相比没什么优势……平时不如用Web……非要下载的话Web也不是不可以，以钢铁洪流为例，地址为https://music.163.com/#/song?id=1394369908，将#/song替换为song/media/outer/url即可右键下载。许多网站提供给一个歌曲id跳转到这一页面的服务，也不算麻烦。4. 代码环境配置4.1. VSCodesudo pacman -S visual-studio-code-bin，ctrl++调大界面，选项里把bar移到右边。在Explorer中打开文件夹，比如在家目录新建Workspaces/VSCode作为工作空间。扩展中安装中文语言包。设置里强制显示空格和制表符。4.1.1. Markdown安装三个插件即可：Markdown All in OneMarkdown Preview Github StylingMarkdown TOC4.1.2. C++4.1.2.1. 测试GCC环境和安装GDBGCC即the GNU Compiler Collection，是GNU的一个编译器集合，包含多种编译器及相关工具。其中的gcc是GNU的C编译器(GNU C Compiler)；g++是GNU的C++编译器(GNU C++ Compiler)。也是GNU Compiler Collection的一部分，sudo pacman -S gcc即可。使用gcc -v确认环境已正确配置。可以nano HelloWorld.cpp尝试写一个HelloWorld，通过g++ HelloWorld.cpp编译。编译完成后会生成一个a.out文档，~/a.out运行它。除此之外，还需要一个GNU DeBugger即GDB。只需sudo pacman -S gdb即可安装。4.1.2.2. 在VSCode上运行程序与在Windows上只需安装一个紫色程序即可高喊M$天下第一实现一切功能不同，在linux下，开发过程中需要使用一系列独立工具配合完成开发。VSCode只是一个文档编辑器，需要进行设置以告诉它怎么和其它工具（也就是前面说的几个）配合工作。首先安装“C/C++”插件，这可以使它对.c和.cpp文件执行恰当的操作。除此之外，还有如下有用的插件应当安装：Code Runner：编译运行单个文件必备Bracket Pair Colorizer：大括号变成彩虹色RainBow Brackets：小括号变成彩虹色Include Autocomplete：自动补全头文件C++ Intellisense：不知道是干啥的，但是VSCode推荐了反正完成之后打开之前的HelloWorld，右键可以运行。但是不能调试，并且头文件那里有可能会标红说找不到。Code Runner默认使用的是“输出”，这个是只读的，设置中勾上“Run In Terminal”即可在终端中进行cin等操作。4.1.2.3. 在VSCode上调试程序在调试选项卡中单击“没有配置”下拉菜单，添加配置，选择C++(GDB/LLDB)。此时会在当前工作区下新建一个launch.json文件并让你设置。另外接下来使用中还会有其它两个需要配置的文件生成。这里不等它们自动生成直接自己手动添加，效果似乎是一样的。4.1.2.3.1. c_cpp_properties.jsongcc -v -E -x c++ -搜索includePath，将结果填在下面的”includePath”处，注意添加/*和引号，中间用逗号分隔：1&#123;2 \"configurations\": [3 &#123;4 \"name\": \"g++\",5 \"intelliSenseMode\": \"gcc-x64\",6 \"includePath\": [7 \"/usr/lib/gcc/x86_64-pc-linux-gnu/9.1.0/include/*\",8 \"/usr/local/include/*\",9 \"/usr/lib/gcc/x86_64-pc-linux-gnu/9.1.0/include-fixed/*\",10 \"/usr/include/*\"11 ],12 \"defines\": [],13 \"browse\": &#123;14 \"path\": [15 \"$&#123;workspaceFolder&#125;\"16 ],17 \"limitSymbolsToIncludedHeaders\": true,18 \"databaseFilename\": \"\"19 &#125;,20 \"cStandard\": \"c11\",21 \"cppStandard\": \"c++17\",22 \"compilerPath\": \"/usr/bin/gcc\"23 &#125;24 ],25 \"version\": 426&#125;这样就解决了标红的问题。4.1.2.3.2. launch.json：此文件给出调试时的任务。1&#123;2 \"version\": \"0.2.0\", //20193 \"configurations\": [4 &#123;5 //配置名称，将会在启动配置的下拉菜单中显示6 \"name\": \"(gdb) Launch\",7 //配置类型，这里只能为cppdbg8 \"type\": \"cppdbg\",9 //请求配置类型，可以为launch（启动）或attach（附加）10 \"request\": \"launch\",11 //将要进行调试的程序也就是前面task生成的那哥们的路径12 \"program\": \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe\",13 //程序调试时传递给程序的命令行参数14 \"args\": [],15 //设为true时程序将暂停在程序入口处16 \"stopAtEntry\": false,17 //下面俩不理解18 \"cwd\": \"$&#123;fileDirname&#125;\",19 \"environment\": [],20 //调试时是否显示控制台窗口21 \"externalConsole\": false,22 //miDebugger的配置，不太懂23 \"MIMode\": \"gdb\",24 \"miDebuggerPath\": \"/usr/bin/gdb\",25 //调试会话开始前执行的任务，要与TASK的名字对应26 \"preLaunchTask\": \"Build\",27 //不知道是干啥的28 \"setupCommands\": [29 &#123;30 \"description\": \"Enable pretty-printing for gdb\",31 \"text\": \"-enable-pretty-printing\",32 \"ignoreFailures\": true33 &#125;34 ]35 &#125;36 ]37&#125;4.1.2.3.3. tasks.json：此文件指定调试前执行的任务。注意在以下文件中网上文章常用的路径是诸如${workspaceFolder}（比较新）或${workspaceRoot}（比较旧）。这会使编译和调试时在工作目录下生成和调试文件。为了方便在工作目录下使用子文件夹（个人偏好），此处均使用${fileDirname}。1&#123;2 \"version\": \"2.0.0\",3 \"tasks\": [4 &#123;5 //任务的名字6 \"label\": \"Build\",7 //该任务要执行的命令8 \"command\": \"g++\",9 //参数们，执行时每个之间会用空格空开10 \"args\": [11 \"-g\",12 \"$&#123;file&#125;\",13 //编译$&#123;file&#125;14 \"-o\",15 \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe\"16 //生成一个位于$&#123;fileDirname&#125;的$&#123;fileBasenameNoExtension&#125;.exe17 ],18 //下面的看不懂了先不管吧19 \"problemMatcher\": &#123;20 \"owner\": \"cpp\",21 \"fileLocation\": [22 \"relative\",23 \"$&#123;fileDirname&#125;\"24 ],25 \"pattern\": &#123;26 \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",27 \"file\": 1,28 \"line\": 2,29 \"column\": 3,30 \"severity\": 4,31 \"message\": 532 &#125;33 &#125;34 &#125;35 ]36&#125;至此可以使用VSCode调试C++了。实际调试时如果使用单步调试，遇到cout等时会报/build/gcc/src/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/include/bits/ostream.tcc: No such file or directory.。必应了一夜都没找到解决方法，结果谷歌了一下第二条结果就可完美解决：This happens because the ostream source file cannot be found.You can strip the libstdc++ library:1sudo strip &#x2F;usr&#x2F;lib&#x2F;libstdc++.so.6 And then gdb will not try to open the source file and the error will not appear anymore.You can switch back to the unstripped version by reinstalling it with:1sudo pacman -S gcc-libs 注意：此操作会导致所有程序退出，并且操作后需要重启，需要先保存并关闭所有其它内容！4.1.2.4. 多文件的编译通常会将头文件分为两个文件，分别用来写实现和声明。例如对于如下的文件结构：某文件夹main.cppheader.hppheader.cpp主程序是main.cpp，header.hpp是一个头文件，但里面的类只是做了声明，具体的实现在header.cpp中。这个时候使用上面的配置就不管用了，因为在这个工程中两个.cpp都需要被编译，而上面的配置（无论是code-runner还是调试）只编译了main.cpp。对于code-runner，打开VSCode的settings.json（不是.vscode下的那个针对Workspace的），添加一项&quot;code-runner.executorMap&quot;:{}，不出意外的话此时会自动填充好默认的各语言的配置文件。将”cpp”一项改为&quot;cd $dir &amp;&amp; g++ *.cpp -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,，也就是把具体的文件替换为了*.cpp即编译所有.cpp即可。对于调试，将tasks.json中的&quot;${file}&quot;改为&quot;*.cpp&quot;会提示找不到文件，似乎是因为这里只能使用绝对目录，这特么就很尴尬了，尝试了加一个cd任务先进入文件夹再用*.cpp等很多方法研究了一晚上没找到合适的修改方法，暂时想调试这类工程只能手动在tasks.json中添加除主文件外的其它文件的绝对路径。4.1.2.5. 后记在第一次升级系统后执行格式化文档报错。查看C/C++扩展的输出发现报错为：1Formatting failed:2&#x2F;home&#x2F;oiljhihai&#x2F;.vscode&#x2F;extensions&#x2F;ms-vscode.cpptools-0.26.0&#x2F;bin&#x2F;..&#x2F;LLVM&#x2F;bin&#x2F;clang-format -style&#x3D;&#123; BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 &#125; -fallback-style&#x3D;LLVM -sort-includes&#x3D;0 -assume-filename&#x3D;&#x2F;home&#x2F;oiljhihai&#x2F;Workspaces&#x2F;VSCode&#x2F;HDU5396.cpp3&#x2F;home&#x2F;oiljhihai&#x2F;.vscode&#x2F;extensions&#x2F;ms-vscode.cpptools-0.26.0&#x2F;bin&#x2F;..&#x2F;LLVM&#x2F;bin&#x2F;clang-format: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory可以看出是因为没找到libinfo.so.5。查了一下，这个东西是一个叫“ncurses”的包里的东西。pacman -Ss一下，大概是这次升级将ncurses5升级到了6，所以就找不到了。pacman -Ss中有两个跟nurses5有关的，先装了第一个看起来像是32位版的sudo pacman -S lib32-ncurses5-compat-libs，没什么用；又试了第二个sudo pacman -S ncurses5-compat-libs，问题解决。4.1.3. Python4.1.3.1. 安装插件PythonPython-autopep8再结合之前已经装好的Code Runner，就可以运行py程序了。运行过程中VSCode会提示要装其它什么东西，装就行了，可能网不好会失败几次。右键格式化，提示装些东西，选autopep8比较好用。4.1.3.2. 安装Anaconada在https://repo.continuum.io/archive/下载.sh文件，在文件目录bash xxxx.sh。安装没问题的话which python可以得到路径。由于路径被配置在了~/.bashrc，需要source ~/.bashrc一下。注意下载Anaconda3，一开始下成了2之后还有点小麻烦……由于是先装了2，再装了3，3的路径就没添加上，所以卸掉2后按升级的方法重装了3：bash xxxx.sh -u；卸载的方法是删掉安装文件夹并删掉bashrc中自动生成的那一段信息。在VSCode中打开一个.py，下方显示文件类型的地方点一下，选配置，在json中添加Anaconda的路径和其它设置选项：1\"python.pythonPath\": \"&lt;which python的结果，类似/home/oiljhihai/anaconda3/bin/python，系统自带的py位于/user/bin/python&gt;\",2 \"python.autoComplete.extraPaths\": [3 \"&lt;应该差不多是形如~/anaconda3/lib/python3.7/site-packages，找一下这个文件夹&gt;\"4 ],5 \"python.linting.flake8Enabled\": false,6\"python.formatting.provider\": \"autopep8\",7//禁用自动换行8 \"python.formatting.autopep8Args\": [9 \"--max-line-length=200\",10 ],11 \"python.testing.unittestEnabled\": true,12 \"python.testing.pytestEnabled\": true,13 \"python.testing.nosetestsEnabled\": false,4.1.3.3. 安装OpenCV在终端进入Python，运行：1import pip._internal2print(pip._internal.pep425tags.get_supported())可以查看当前py版本所支持的包。在https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv或清华镜像https://pypi.tuna.tsinghua.edu.cn/simple/opencv-python/找到符合条件的包，丢到前面的&quot;python.autoComplete.extraPaths&quot;:填的目录下直接pip install opencv_python-xxxxxx.whl即可。以下不用看，把opencv版本搞错了。conda install --channel https://conda.anaconda.org/menpo opencv3即可安装，但过程中报错“Unsatisfiable Error”。大体意思是版本不对应。可以根据详细的报错信息判断出目前的Python是3.7，而openCV只支持到3.6。解决办法是安装3.6的环境conda create -n python3.6 -c menpo configparser。安装完毕后电脑上同时有python3.7和3.6，其中3.7位于前面说的位置，3.6位于`/anaconda3/envs/python3.6/bin/python，bashrc只记录了3.7的路径。于是通过conda activate python3.6进入3.6的环境，再次安装即可。安装完毕后python进入写python代码模式，import cv2`不报错就是装好了。~~conda deactivate退出python3.6。进入VSCode，此时VSCode还在用3.7的路径，所以不能写openCV。用3.6的路径替换一下就OK了。这时运行.py还是先在终端默认的3.7运行，报错后VSCode会自动根据设定的路径conda activate python3.6。通过：1import cv22img = cv2.imread('~/Workspaces/VSCode/test/test.jpeg',cv2.IMREAD_COLOR)3cv2.imshow('image',img)4cv2.waitKey(0)5cv2.destroyAllWindows()测试。然而如果用相对路径会报错“OpenCV Error: Assertion failed (size.width&gt;0 &amp;&amp; size.height&gt;0) in imshow”，没查到为啥（另外网上说中文路径、图片不在工程文件夹内都会报错。这也太WEAK了吧……）。但是这样的话目录啥的变了直接凉凉啊，研究半天，这里可以用路径获取+格式化输出：1import os2path=os.path.dirname(os.path.abspath(__file__))3img0=cv2.imread(r'%s/mipha.jpg'%path)4.2 Hexo+GithubPages博客配置4.2.1. Hexo基本环境的配置hexo依赖于git和node.js。manjaro自带git，可git查看详情。hexo官方建议使用node.js的管理工具nvm安装node.js（nvm是管理node.js的版本的工具，npm是node.js管理它的包的工具）。尝试了官方https://github.com/nvm-sh/nvm给出的curl -o- https://raw.githubusercontent.com/creationix/nvm/v.xx.xx.xx/install.sh | bash（xx为当前版本号）命令，访问会被拒绝。经测试可用1git clone https://github.com/creationix/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`命令安装，可以看出这里是把它装到了/.nvm下。完成后在~/.bash_profile【更新：`/.bashrc下（否则重启终端后需要source /.bash_profile，不然会提示没有npm这个命令。官方教程说/.bashrc,/.zshrc,/.bash_profile,~/.profile`都可以】中添加环境变量：1export NVM_DIR=\"$HOME/.nvm\"2[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"3export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node注意地址与安装地址相匹配。最后一行是淘宝镜像源，根据需求添加，也可在调用npm时NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node nvm install node。保存后source ~/.bash_profile即可使用nvm和node命令。然后使用NVM安装node.js，只需nvm install node，这样npm也可以使用了。进行一下设置：1npm config set user 02npm config set unsafe-perm true3npm config set registry https://registry.npm.taobao.org不设置前两个的话会报Permission denied，进度条卡在最开始不动，最后一个是镜像源。至此可以使用npm命令下载node包。4.2.2. Hexo的安装与初始化npm install -g hexo-cli，可使用hexo -v查看安装结果。从github上下载网页的代码hexo init &lt;folder&gt;后在&lt;folder&gt;/安装所需的依赖npm install，之后hexo -s就可以看到网页了。考虑使用~/blog作为文件夹。4.2.3. 写博客在Hexo目录下hexo new [类型] &lt;&quot;博客名&quot;&gt;，类型缺省时为新建一篇博客post（另两种是新建页面page和新建草稿draft，例如可以通过hexo new page &quot;404&quot;在source下生成一个404页面）。这其实就是将模板文件blog/scaffolds/对应类型的内容复制过来并重命名为博客名.md。默认post新建博客类型的模板为以下内容：1---2title: &#123;&#123; title &#125;&#125;3date: &#123;&#123; date &#125;&#125;4tags:5---其中前两项生成时会自动填写，tags一项的填写格式为1tags: [标签1,标签2,...]2或3tags:4 - 标签15 - 标签26 - ……编辑保存后hexo g即可。运行hexo s可查看。除默认配置外，有必要添加如下内容。categories:，分级目录属性。与tags属性不同，其可以划分父子级关系。例如：1---2title: 怎么拿长老知识3...4categories: 5 - 游戏6 - 遗迹：灰烬重生7...8---thumbnail:（如果主题支持文章封面），后跟图片链接即可。经测试，使用450*212的图片作为主题“Hueman”的封面可以获得比较好的画质，体积也只有20至30KB。updated: 1569245658000更新日期。4.2.4. 站点的配置在blog/有一_config.yml文件，其保存有站点相关的设置。开头是Site模块：1# Site2title: 标题，会显示在浏览器标签栏上3subtitle: 副标题4description: 描述5keywords:6author: 作者7language: 语言（简中：zh-CN；不同主题不同，例如NexT中似乎叫zh-Hans）8timezone: 网站时区，默认使用电脑的无需改动剩下的似乎不是太用改，例如URL模块似乎是当网站放在子目录下时用的等等。当此配置文件与主题的配置文件冲突时，此配置文件将覆盖主题的配置文件。hexo的文章是.md经过swig转换成的html，生成的html中的空格和注释会影响JS的性能，可在blog/安装hexo自带的neat插件npm install hexo-neat --save进行压缩。安装插件后在站点配置文件中添加：1# hexo-neat2# 博文压缩3neat_enable: true4# 压缩html5neat_html:6 enable: true7 exclude:8# 压缩css 9neat_css:10 enable: true11 exclude:12 - '**/*.min.css'13# 压缩js14neat_js:15 enable: true16 mangle: true17 output:18 compress:19 exclude:20 - '**/*.min.js'21 - '**/jquery.fancybox.pack.js'22 - '**/index.js'4.2.5. 主题的配置（其实默认主题挺好的，简约大气。自己改一下图片啊配色啊啥的相当不错）如果想要换主题，首先找到一个主题，下载可得一个压缩包，注意很多主题同时会有WordPress和Hexo两个版本，不要下错。例如下载”hueman“这个主题，从https://github.com/ppoffice/hexo-theme-hueman下载后解压到themes文件夹下即可。需要确保将点进这个文件夹就能看到_config.yml文件。hueman主题的包中并无此文件，只有一个_config.yml.example文件，进行适当修改后改一下名即可。使用解压出的文件夹的名字替换掉博客根目录下的另一个_config.yml中theme项的内容后hexo g即可，注意theme:后应当有一个空格。各主题的_config.yml非常容易读懂，以下均以heuman为例。开头是memu项：1# Menus2menu:3 Home: /4 # Delete this row if you don't want categories in your header nav bar5 Categories:6 About: /about/index.html这是说菜单栏里有哪些选项卡，这里就是有两个，分别为Home和About。当在网页中单击Home选项卡时回调转至blog/public/，显示index.html；单击About则会跳转至blog/public/about/index.html，当然现在还没有建立这个文件夹，报Cannot GET /about/index.html。如果想要使其可以访问，只需hexo new page &quot;about&quot;，以上命令会在blog/source/下生成一个about文件夹，里面会创建index.md，部署后即可访问。如果新建其它在主题配置文件中没有写好的页面并想将之添加至选项卡栏，只需new后在此文件中添加路径即可。而如果想要在侧边栏添加内容，只需在widgets添加一条自定义名称。在.../layout/widget/添加一个&lt;自定义名称&gt;.ejs,填入模板：1&lt;% if (site.posts.length) &#123; %&gt;2 &lt;div class=\"widget-wrap widget-list\"&gt;3 &lt;h3 class=\"widget-title\"&gt;&lt;%= __('sidebar.communiation') %&gt;&lt;/h3&gt;4 &lt;div class=\"widget\"&gt;5 &lt;!--这里添加你要写的内容--&gt;6 &lt;/div&gt;7 &lt;/div&gt;注意如果不使用英文，还要在对应的语言文件.../langulages/zh-CN.yml中添加翻译。这个主题还提供了搜索功能https://github.com/ppoffice/hexo-theme-hueman/wiki/Search，以第一种默认的使用Insight插件的方式为例，只需先npm install -S hexo-generator-json-content，再npm install -S hexo-generator-json-content即可，使用其它方式需要更改主题配置文件。这个主题还提供了评论功能，有许多可选的服务提供商，不过没什么卵用。国内的要么倒闭了要么需要实名制，国外的又要扶墙……【更新】发现了一个比较好用的服务商，棒子的“来必力”https://www.livere.com/。只需正常步骤注册即可获得一段代码，用此代码替换掉主题中的layout/comment/livere.ejs中的内容，再在主题配置文件中禁用comment项下的所有评论工具，在comment项外，比如上面一行添加livere_uid: xxxxxxxx，其中xxxxxxx为获取的代码中提供的UID。再将主题中的layout/common/article.ejs中最后一行&lt;%- partial(&#39;comment/index&#39;) %&gt;改为&lt;%- partial(&#39;comment/livere&#39;) %&gt;即可。添加网站访问数统计只需在xx-analysis项添加从分析网站比如百度分析、谷歌分析等等网站获得的哈希值即可。注册帐号后根据提示操作即可获得一段JS代码，哈希值在其中。但这类网站只能站主登录进去查看自己网站的访问情况。若想在网站中显示访问数，可使用http://ibruce.info/2015/04/04/busuanzi/，注意footer文件的位置可能与官方描述有差别。不蒜子自身只提供标签与数字，具体内容由用户编辑。使用官方给出的简易程序对footer做如下修改将统计显示在页脚：1&lt;footer id=\"footer\"&gt;2 &lt;div class=\"container\"&gt;3 &lt;div class=\"container-inner\"&gt;4 &lt;a id=\"back-to-top\" href=\"javascript:;\"&gt;&lt;i class=\"icon fa fa-angle-up\"&gt;&lt;/i&gt;&lt;/a&gt;5 &lt;div class=\"credit\"&gt;6 &lt;h1 class=\"logo-wrap\"&gt;7 &lt;a href=\"&lt;%- url_for() %&gt;\" class=\"logo\"&gt;&lt;/a&gt;8 &lt;/h1&gt;9 10 &lt;!--添加--&gt;11 &lt;script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;12 &lt;/script&gt;13 14 &lt;span id=\"busuanzi_container_site_pv\"&gt;15 本站总访问量&lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt;次16 &lt;/span&gt;17 18 &lt;span id=\"busuanzi_container_site_uv\"&gt;19 总访客数&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;人20 &lt;/span&gt;21 22&lt;!--结束--&gt;23 24 &lt;p&gt;&amp;copy; &lt;%= date(new Date(), 'YYYY') %&gt; &lt;%= config.author || config.title %&gt;&lt;/p&gt;25 &lt;p&gt;Powered by &lt;a href=\"//hexo.io/\" target=\"_blank\"&gt;Hexo&lt;/a&gt;. Theme by &lt;a href=\"//github.com/ppoffice\" target=\"_blank\"&gt;PPOffice&lt;/a&gt;&lt;/p&gt;26 &lt;/div&gt;27 &lt;div class=\"footer-plugins\"&gt;28 &lt;%- partial('plugin/scripts', &#123; isFooter: true &#125;) %&gt;29 &lt;/div&gt;30 31 &lt;script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;32 &lt;/script&gt;33 34 &lt;/div&gt;35 &lt;/div&gt;36&lt;/footer&gt;如果想要开启RSS订阅，首先需要安装RSS插件npm install hexo-generator-feed --save，并在站点配置文件中添加RSS支持：1# RSS订阅支持2plugin:3 - hexo-generator-feed45# Feed Atom6feed:7 type: atom #RSS的类型(atom/rss2)8 path: atom.xml #文件路径,默认atom.xml/rss2.xml9 limit: 20 #展示文章的数量,0或false展示全部10hub:11 content: #在RSS文件中是否包含内容，默认false12 content_limit: #在上面为false时指定内容的长度作为摘要13 content_limit_delim: ' ' #上面截取描述的分隔符，遇到则结束截取最后将主题配置文件中的rss项改为rss: /atom.xml可开启RSS订阅，可在public/见atom.xml。另外其它文件也可以自己看着改，譬如blog/themes/hexo-theme-hueman-master/source/css/_variables.styl中可以自己改配色等，其中color-theme指的是那一小条社交网站的颜色和鼠标悬浮在链接上时链接的颜色（在_config.yml中改的貌似不管用，可能是这里的判断语句对应的不是现在的文件结构？），color-header-background指图标所在那一大块空白的颜色，color-background指两侧最大空白的颜色，color-nav-background指选项卡栏的颜色等，color-footer-background指最下一栏的颜色等。这些似乎不会直接同步到GitHub，而是将内容整合到/css/style.css中。4.2.6. 部署至GitHub安装hexo的插件：npm install hexo-deployer-git --save。在github中建立一个以自己名字命名的仓库，建好后将_config.yml中的`deploy项替换为：1deploy:2 type: git3 repository: 建好仓库后给出的地址中git格式那个复制一下粘过来4 branch: master首先配置git用户名git config --global user.name &quot;&lt;用户名&gt;&quot;和邮箱git config --global user.email &quot;&lt;邮箱&gt;&quot;，这会生成一个~/gitconfig文件，想改的话直接改这个文件就行。然后获取SHH密钥ssh-keygen -t rsa -C &quot;&lt;前面的邮箱&gt;&quot;，一路回车即可，之后会生成一个~/.ssh文件夹，其中有一个私钥id_rsa和一个公钥id_rsa.pub，将公钥添加至github。从github网页右上角的下拉菜单里的settings中添加。如果ssh -T git@github.com后（第一次连接时中间需要yes一下）出现You&#39;ve successfully authenticated, but GitHub does not provide shell access.说明OK了，使用hexo d即可部署网页。4.2.7. 域名解析终端ping -4 用户名.github.io可以获得GitHub Pages的服务器地址。在提供域名解析的网站的控制台，设置主机记录www，记录类型为A，记录值为刚才ping得的地址。再设置一条主机记录@，记录类型为CNAME，记录值是用户名.github.io。这两条分别意味着将购买的域名指向一个IPv4地址和另一个域名。在blog/source/建立CNAME文件，写入购买的域名。进入GitHub中的博客仓库。在仓库的Setting-&gt;Custom domain添加域名后保存即可。4.2.8. 使用LaTex语法在主题配置文件中开启“mathjax”一项为true即可使用LaTex语法，某些主题可能还需要将“math”开启。但是默认的渲染引擎“hexo-renderer-marked”的文法显然是有很多地方有二义性的，渲染简单的式子没什么问题，但对于复杂的式子例如有换行的行内式（……其实也不算复杂啊）无法渲染。常见的解决方案是更换渲染引擎。进入~/blog，npm uninstall hexo-renderer-marked --save，npm install hexo-renderer-kramed --save，即可更换成另一个表现较好的引擎。但对部分LaTex语法符号该引擎仍会当作Markdown符号渲染。修改node_modules\\kramed\\lib\\rules\\inline.js中转义（escape）：1escape: &#x2F;^\\\\([\\\\&#96;*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])&#x2F;,为：1escape: &#x2F;^\\\\([&#96;*\\[\\]()#$+\\-.!_&gt;])&#x2F;,取消对,{,}的转义；修改斜体指定（em）：1em: &#x2F;^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)&#x2F;,为：1em: &#x2F;^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)&#x2F;,取消将_转换为&lt;em&gt;标签。此时*仍会被转换。但是不能再删了，毕竟斜体还是比较常用的。当在LaTex语法中遇到*时可用\\times或\\star等代替（而且更好看）。5. 尾声完成以上配置后的manjaro已经可以正常使用了。可以从优化中设置GNOME桌面的样式——不过默认外观已经很好看了，但是在拓展中可以启用GNOME的一些有用插件，例如显示在上方工具条中的许多有用工具。Windows系统中的字体可以直接拿过来安装，非常方便；如果只是在Libre Office下用的话只拷贝到～/.config/libreoffice/4/user/fonts下也可以在Libre Office中用。如果没有fonts目录新建即可。若报未找到strip分割所需的二进制文件，似乎是由于缺少编译器，sudo pacman -S core/binutils可安装酷睿的binutils工具集，或安装gcc。","categories":[{"name":"戏法","slug":"戏法","permalink":"http://yoursite.com/categories/%E6%88%8F%E6%B3%95/"}],"tags":[{"name":"Manjaro","slug":"Manjaro","permalink":"http://yoursite.com/tags/Manjaro/"}]}]}